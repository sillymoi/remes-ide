/*
* generated by Xtext
*/
grammar InternalProfile;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package hr.fer.rasip.remes.profile.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package hr.fer.rasip.remes.profile.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import hr.fer.rasip.remes.profile.services.ProfileGrammarAccess;

}

@parser::members {

 	private ProfileGrammarAccess grammarAccess;
 	
    public InternalProfileParser(TokenStream input, ProfileGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "PlatformProfile";	
   	}
   	
   	@Override
   	protected ProfileGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRulePlatformProfile
entryRulePlatformProfile returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPlatformProfileRule()); }
	 iv_rulePlatformProfile=rulePlatformProfile 
	 { $current=$iv_rulePlatformProfile.current; } 
	 EOF 
;

// Rule PlatformProfile
rulePlatformProfile returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPlatformProfileAccess().getPlatformProfileAction_0(),
            $current);
    }
)	otherlv_1='profile' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPlatformProfileAccess().getProfileKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getPlatformProfileAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPlatformProfileRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPlatformProfileAccess().getLeftCurlyBracketKeyword_3());
    }
(	otherlv_4='resources' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPlatformProfileAccess().getResourcesKeyword_4_0());
    }
	otherlv_5='{' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getPlatformProfileAccess().getLeftCurlyBracketKeyword_4_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPlatformProfileAccess().getResourcesResourceParserRuleCall_4_2_0()); 
	    }
		lv_resources_6_0=ruleResource		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPlatformProfileRule());
	        }
       		add(
       			$current, 
       			"resources",
        		lv_resources_6_0, 
        		"Resource");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_7=',' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getPlatformProfileAccess().getCommaKeyword_4_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPlatformProfileAccess().getResourcesResourceParserRuleCall_4_3_1_0()); 
	    }
		lv_resources_8_0=ruleResource		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPlatformProfileRule());
	        }
       		add(
       			$current, 
       			"resources",
        		lv_resources_8_0, 
        		"Resource");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_9='}' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getPlatformProfileAccess().getRightCurlyBracketKeyword_4_4());
    }
)?(	otherlv_10='constraints' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getPlatformProfileAccess().getConstraintsKeyword_5_0());
    }
	otherlv_11='{' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getPlatformProfileAccess().getLeftCurlyBracketKeyword_5_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPlatformProfileAccess().getConstraintsConstraintParserRuleCall_5_2_0()); 
	    }
		lv_constraints_12_0=ruleConstraint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPlatformProfileRule());
	        }
       		add(
       			$current, 
       			"constraints",
        		lv_constraints_12_0, 
        		"Constraint");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_13=',' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getPlatformProfileAccess().getCommaKeyword_5_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPlatformProfileAccess().getConstraintsConstraintParserRuleCall_5_3_1_0()); 
	    }
		lv_constraints_14_0=ruleConstraint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPlatformProfileRule());
	        }
       		add(
       			$current, 
       			"constraints",
        		lv_constraints_14_0, 
        		"Constraint");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_15='}' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getPlatformProfileAccess().getRightCurlyBracketKeyword_5_4());
    }
)?	otherlv_16='}' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getPlatformProfileAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleResource
entryRuleResource returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getResourceRule()); }
	 iv_ruleResource=ruleResource 
	 { $current=$iv_ruleResource.current; } 
	 EOF 
;

// Rule Resource
ruleResource returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getResourceAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getResourceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getResourceAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getResourceAccess().getTypeResourceTypeEnumRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleResourceType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getResourceRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"ResourceType");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3='@' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getResourceAccess().getCommercialAtKeyword_3_0());
    }
(
(
		lv_weight_4_0=RULE_INT
		{
			newLeafNode(lv_weight_4_0, grammarAccess.getResourceAccess().getWeightINTTerminalRuleCall_3_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getResourceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"weight",
        		lv_weight_4_0, 
        		"INT");
	    }

)
))?)
;





// Entry rule entryRuleConstraint
entryRuleConstraint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstraintRule()); }
	 iv_ruleConstraint=ruleConstraint 
	 { $current=$iv_ruleConstraint.current; } 
	 EOF 
;

// Rule Constraint
ruleConstraint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getConstraintAccess().getTypeConstraintTypeEnumRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleConstraintType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstraintRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"ConstraintType");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getConstraintAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstraintRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getConstraintAccess().getReferencesResourceCrossReference_2_0()); 
	}

)
)(
(
		lv_isDerivation_3_0=	'\'' 
    {
        newLeafNode(lv_isDerivation_3_0, grammarAccess.getConstraintAccess().getIsDerivationApostropheKeyword_3_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstraintRule());
	        }
       		setWithLastConsumed($current, "isDerivation", true, "\'");
	    }

)
)?	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getConstraintAccess().getRightParenthesisKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstraintAccess().getOperationConstraintOperationEnumRuleCall_5_0()); 
	    }
		lv_operation_5_0=ruleConstraintOperation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstraintRule());
	        }
       		set(
       			$current, 
       			"operation",
        		lv_operation_5_0, 
        		"ConstraintOperation");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_bound_6_0=RULE_INT
		{
			newLeafNode(lv_bound_6_0, grammarAccess.getConstraintAccess().getBoundINTTerminalRuleCall_6_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstraintRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"bound",
        		lv_bound_6_0, 
        		"INT");
	    }

)
))
;





// Rule ResourceType
ruleResourceType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='cpu' 
	{
        $current = grammarAccess.getResourceTypeAccess().getCpuEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getResourceTypeAccess().getCpuEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='memory' 
	{
        $current = grammarAccess.getResourceTypeAccess().getMemoryEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getResourceTypeAccess().getMemoryEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='bandwidth' 
	{
        $current = grammarAccess.getResourceTypeAccess().getBandwidthEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getResourceTypeAccess().getBandwidthEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='power' 
	{
        $current = grammarAccess.getResourceTypeAccess().getPowerEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getResourceTypeAccess().getPowerEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='port' 
	{
        $current = grammarAccess.getResourceTypeAccess().getPortEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getResourceTypeAccess().getPortEnumLiteralDeclaration_4()); 
    }
));



// Rule ConstraintType
ruleConstraintType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='min' 
	{
        $current = grammarAccess.getConstraintTypeAccess().getMinimumEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getConstraintTypeAccess().getMinimumEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='max' 
	{
        $current = grammarAccess.getConstraintTypeAccess().getMaximumEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getConstraintTypeAccess().getMaximumEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='avg' 
	{
        $current = grammarAccess.getConstraintTypeAccess().getAverageEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getConstraintTypeAccess().getAverageEnumLiteralDeclaration_2()); 
    }
));



// Rule ConstraintOperation
ruleConstraintOperation returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='<' 
	{
        $current = grammarAccess.getConstraintOperationAccess().getLessEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getConstraintOperationAccess().getLessEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='<=' 
	{
        $current = grammarAccess.getConstraintOperationAccess().getLessOrEqualEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getConstraintOperationAccess().getLessOrEqualEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='==' 
	{
        $current = grammarAccess.getConstraintOperationAccess().getEqualEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getConstraintOperationAccess().getEqualEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='>=' 
	{
        $current = grammarAccess.getConstraintOperationAccess().getGreaterOrEqualEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getConstraintOperationAccess().getGreaterOrEqualEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='>' 
	{
        $current = grammarAccess.getConstraintOperationAccess().getGreaterEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getConstraintOperationAccess().getGreaterEnumLiteralDeclaration_4()); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : '-'? ('0'..'9')+;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


