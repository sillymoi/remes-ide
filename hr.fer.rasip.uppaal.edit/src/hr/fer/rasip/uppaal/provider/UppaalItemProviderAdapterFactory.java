/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package hr.fer.rasip.uppaal.provider;

import hr.fer.rasip.uppaal.util.UppaalAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class UppaalItemProviderAdapterFactory extends UppaalAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection supportedTypes = new ArrayList();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public UppaalItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link hr.fer.rasip.uppaal.CommittedType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CommittedTypeItemProvider committedTypeItemProvider;

	/**
	 * This creates an adapter for a {@link hr.fer.rasip.uppaal.CommittedType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCommittedTypeAdapter() {
		if (committedTypeItemProvider == null) {
			committedTypeItemProvider = new CommittedTypeItemProvider(this);
		}

		return committedTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hr.fer.rasip.uppaal.DocumentRoot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DocumentRootItemProvider documentRootItemProvider;

	/**
	 * This creates an adapter for a {@link hr.fer.rasip.uppaal.DocumentRoot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createDocumentRootAdapter() {
		if (documentRootItemProvider == null) {
			documentRootItemProvider = new DocumentRootItemProvider(this);
		}

		return documentRootItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hr.fer.rasip.uppaal.InitType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InitTypeItemProvider initTypeItemProvider;

	/**
	 * This creates an adapter for a {@link hr.fer.rasip.uppaal.InitType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createInitTypeAdapter() {
		if (initTypeItemProvider == null) {
			initTypeItemProvider = new InitTypeItemProvider(this);
		}

		return initTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hr.fer.rasip.uppaal.LabelType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LabelTypeItemProvider labelTypeItemProvider;

	/**
	 * This creates an adapter for a {@link hr.fer.rasip.uppaal.LabelType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createLabelTypeAdapter() {
		if (labelTypeItemProvider == null) {
			labelTypeItemProvider = new LabelTypeItemProvider(this);
		}

		return labelTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hr.fer.rasip.uppaal.LocationType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LocationTypeItemProvider locationTypeItemProvider;

	/**
	 * This creates an adapter for a {@link hr.fer.rasip.uppaal.LocationType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createLocationTypeAdapter() {
		if (locationTypeItemProvider == null) {
			locationTypeItemProvider = new LocationTypeItemProvider(this);
		}

		return locationTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hr.fer.rasip.uppaal.NailType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NailTypeItemProvider nailTypeItemProvider;

	/**
	 * This creates an adapter for a {@link hr.fer.rasip.uppaal.NailType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createNailTypeAdapter() {
		if (nailTypeItemProvider == null) {
			nailTypeItemProvider = new NailTypeItemProvider(this);
		}

		return nailTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hr.fer.rasip.uppaal.NameType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NameTypeItemProvider nameTypeItemProvider;

	/**
	 * This creates an adapter for a {@link hr.fer.rasip.uppaal.NameType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createNameTypeAdapter() {
		if (nameTypeItemProvider == null) {
			nameTypeItemProvider = new NameTypeItemProvider(this);
		}

		return nameTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hr.fer.rasip.uppaal.NtaType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NtaTypeItemProvider ntaTypeItemProvider;

	/**
	 * This creates an adapter for a {@link hr.fer.rasip.uppaal.NtaType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createNtaTypeAdapter() {
		if (ntaTypeItemProvider == null) {
			ntaTypeItemProvider = new NtaTypeItemProvider(this);
		}

		return ntaTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hr.fer.rasip.uppaal.ParameterType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterTypeItemProvider parameterTypeItemProvider;

	/**
	 * This creates an adapter for a {@link hr.fer.rasip.uppaal.ParameterType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createParameterTypeAdapter() {
		if (parameterTypeItemProvider == null) {
			parameterTypeItemProvider = new ParameterTypeItemProvider(this);
		}

		return parameterTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hr.fer.rasip.uppaal.SourceType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SourceTypeItemProvider sourceTypeItemProvider;

	/**
	 * This creates an adapter for a {@link hr.fer.rasip.uppaal.SourceType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createSourceTypeAdapter() {
		if (sourceTypeItemProvider == null) {
			sourceTypeItemProvider = new SourceTypeItemProvider(this);
		}

		return sourceTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hr.fer.rasip.uppaal.TargetType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TargetTypeItemProvider targetTypeItemProvider;

	/**
	 * This creates an adapter for a {@link hr.fer.rasip.uppaal.TargetType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createTargetTypeAdapter() {
		if (targetTypeItemProvider == null) {
			targetTypeItemProvider = new TargetTypeItemProvider(this);
		}

		return targetTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hr.fer.rasip.uppaal.TemplateType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TemplateTypeItemProvider templateTypeItemProvider;

	/**
	 * This creates an adapter for a {@link hr.fer.rasip.uppaal.TemplateType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createTemplateTypeAdapter() {
		if (templateTypeItemProvider == null) {
			templateTypeItemProvider = new TemplateTypeItemProvider(this);
		}

		return templateTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hr.fer.rasip.uppaal.TransitionType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransitionTypeItemProvider transitionTypeItemProvider;

	/**
	 * This creates an adapter for a {@link hr.fer.rasip.uppaal.TransitionType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createTransitionTypeAdapter() {
		if (transitionTypeItemProvider == null) {
			transitionTypeItemProvider = new TransitionTypeItemProvider(this);
		}

		return transitionTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hr.fer.rasip.uppaal.UrgentType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UrgentTypeItemProvider urgentTypeItemProvider;

	/**
	 * This creates an adapter for a {@link hr.fer.rasip.uppaal.UrgentType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createUrgentTypeAdapter() {
		if (urgentTypeItemProvider == null) {
			urgentTypeItemProvider = new UrgentTypeItemProvider(this);
		}

		return urgentTypeItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class) || (((Class)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (committedTypeItemProvider != null) committedTypeItemProvider.dispose();
		if (documentRootItemProvider != null) documentRootItemProvider.dispose();
		if (initTypeItemProvider != null) initTypeItemProvider.dispose();
		if (labelTypeItemProvider != null) labelTypeItemProvider.dispose();
		if (locationTypeItemProvider != null) locationTypeItemProvider.dispose();
		if (nailTypeItemProvider != null) nailTypeItemProvider.dispose();
		if (nameTypeItemProvider != null) nameTypeItemProvider.dispose();
		if (ntaTypeItemProvider != null) ntaTypeItemProvider.dispose();
		if (parameterTypeItemProvider != null) parameterTypeItemProvider.dispose();
		if (sourceTypeItemProvider != null) sourceTypeItemProvider.dispose();
		if (targetTypeItemProvider != null) targetTypeItemProvider.dispose();
		if (templateTypeItemProvider != null) templateTypeItemProvider.dispose();
		if (transitionTypeItemProvider != null) transitionTypeItemProvider.dispose();
		if (urgentTypeItemProvider != null) urgentTypeItemProvider.dispose();
	}

}
